<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>USTH_Duong_Ngoc_Toan_M1</name>
  </assembly>
  <members>
    <member name="N:Game.Dictionary">
    </member>
    <member name="T:Game.Dictionary.GameDictionary">
    </member>
    <member name="M:Game.Dictionary.GameDictionary.#ctor">
      <summary>
Constructor</summary>
      <remarks>
Construct an empty binary search tree.</remarks>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Root">
      <summary>
Root node</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Version">
      <summary>
Returns the current dictionary version.</summary>
      <remarks>
This method is used by enumerators to track the dictionary modification.</remarks>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Count">
      <summary>
Gets the number of key-and-value pairs contained in the <see cref="GameDictionary" />.</summary>
      <remarks>
Complexity: O(N)</remarks>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.IsSynchronized">
      <summary>
Get a value indicating whether access to the <see cref="GameDictionary" /> is synchronized (thread-safe).</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.SyncRoot">
      <summary>
Gets an object that can be used to synchronize access to the <see cref="GameDictionary" />.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.IsFixedSize">
      <summary>
Gets a value indicating whether the <see cref="GameDictionary" /> has a fixed size.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.IsReadOnly">
      <summary>
Gets a value indicating whether the <see cref="GameDictionary" /> is read-only.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Keys">
      <summary>
Gets an <see cref="StringCollection" /> containing the keys in the <see cref="GameDictionary" />.</summary>
      <value>
An <see cref="StringCollection" /> containing the keys in the <see cref="GameDictionary" />.</value>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Values">
      <summary>
Gets an <see cref="ICollection" /> containing the values in the <see cref="GameDictionary" />.</summary>
      <value>
An <see cref="ICollection" /> containing the values in the <see cref="GameDictionary" />.</value>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Clone">
      <summary>
Creates a shallow copy of the <see cref="GameDictionary" />.</summary>
      <returns>
A shallow copy of the <see cref="GameDictionary" />.</returns>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Synchronized(Game.Dictionary.GameDictionary)">
      <summary>
Returns a synchronized (thread-safe) wrapper for the <see cref="GameDictionary" />.</summary>
      <returns>
A synchronized (thread-safe) wrapper for the <see cref="GameDictionary" />.</returns>
      <param name="table">
The <see cref="GameDictionary" /> to synchronize.</param>
      <exception cref="ArgumentNullException">
<paramref name="table" /> is a null reference.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.CopyTo(System.Array,System.Int32)">
      <summary>
Copies the <see cref="GameDictionary" /> elements to a one-dimensional Array instance at the specified index.</summary>
      <param name="array">
The one-dimensional <see cref="Array" /> that is the destination of the <see cref="DictionaryEntry" /> objects copied from <see cref="GameDictionary" />. The <see cref="Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">
The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="ArgumentNullException">
<paramref name="array" /> is a null reference</exception>
      <exception cref="ArgumentOutOfRangeException">
<paramref name="arrayIndex" /> is less than zero.</exception>
      <exception cref="ArgumentException">
<paramref name="array" /> is multidimensional.</exception>
      <exception cref="ArgumentException">
<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.</exception>
      <exception cref="ArgumentException">
The number of elements in the source <see cref="GameDictionary" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array.</exception>
      <exception cref="ArgumentException">
The type of the source <see cref="GameDictionary" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.RandomKey">
    </member>
    <member name="M:Game.Dictionary.GameDictionary.RandomKey(System.Int32)">
      <param name="LenghMin">
</param>
    </member>
    <member name="P:Game.Dictionary.GameDictionary.Item(System.String)">
      <summary>
Gets or sets the value associated with the specified key.</summary>
      <remarks>
[C#] In C#, this property is the indexer for the <see cref="GameDictionary" /> class.</remarks>
      <param name="key">
The key whose value to get or set.</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is a null reference</exception>
      <exception cref="ArgumentException">
The property is set and <paramref name="key" /> is an empty string</exception>
      <exception cref="NotSupportedException">
The property is set and the <see cref="GameDictionary" /> is read-only.</exception>
      <exception cref="NotSupportedException">
The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="GameDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Add(System.String,System.Object)">
      <summary>
Adds an element with the specified key and value into the <see cref="GameDictionary" />.</summary>
      <param name="key">
The key of the element to add.</param>
      <param name="value">
The value of the element to add. The value can be a null reference (Nothing in Visual Basic).</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="ArgumentException">
<paramref name="key" /> is an empty string</exception>
      <exception cref="ArgumentException">
An element with the same key already exists in the <see cref="GameDictionary" />.</exception>
      <exception cref="NotSupportedException">
The <see cref="GameDictionary" /> is read-only.</exception>
      <exception cref="NotSupportedException">
The <see cref="GameDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Remove(System.String)">
      <summary>
Removes the element with the specified key from the <see cref="GameDictionary" />.</summary>
      <param name="key">
The key of the element to remove.</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="ArgumentException">
<paramref name="key" /> is an empty string</exception>
      <exception cref="NotSupportedException">
The <see cref="GameDictionary" /> is read-only.</exception>
      <exception cref="NotSupportedException">
The <see cref="GameDictionary" /> has a fixed size.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Clear">
      <summary>
Removes all elements from the <see cref="GameDictionary" />.</summary>
      <exception cref="NotSupportedException">
The <see cref="GameDictionary" /> is read-only.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Contains(System.String)">
      <summary>
Determines whether the <see cref="GameDictionary" /> contains a specific key.</summary>
      <remarks>
<para>Complexity: Uses a binary Search Tree (Game) to find the key.</para> <para>The method behaves exactly as <see cref="GameDictionary.ContainsKey" />.</para></remarks>
      <returns>
true if the <see cref="GameDictionary" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">
The key to locate in the <see cref="GameDictionary" />.</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.ContainsKey(System.String)">
      <summary>
Determines whether the <see cref="GameDictionary" /> contains a specific key.</summary>
      <remarks>
<para>Complexity: Uses a binary Search Tree (Game) to find the key.</para> <para>The method behaves exactly as <see cref="GameDictionary.Contains" />.</para></remarks>
      <returns>
true if the <see cref="GameDictionary" /> contains an element with the specified key; otherwise, false.</returns>
      <param name="key">
The key to locate in the <see cref="GameDictionary" />.</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.ContainsValue(System.Object)">
      <summary>
Determines whether the <see cref="GameDictionary" /> contains a specific value.</summary>
      <returns>
true if the <see cref="GameDictionary" /> contains an element with the specified value; otherwise, false.</returns>
      <param name="value">
</param>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.GetEnumerator">
      <summary>
Returns an <see cref="IDictionaryEnumerator" /> that can iterate through the <see cref="GameDictionary" />.</summary>
      <returns>
An <see cref="IDictionaryEnumerator" /> for the <see cref="GameDictionary" />.</returns>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.Find(System.String)">
      <summary>
Finds the Game node matching the key.</summary>
      <returns>
the <see cref="GameDictionaryEntry" /> mathcing the key, null if not found.</returns>
      <param name="key">
</param>
      <exception cref="ArgumentNullException">
<paramref name="key" /> is null.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.PartialMatch(System.String)">
      <param name="key">
</param>
      <exception cref="ArgumentNullException">
key is a null reference</exception>
      <exception cref="ArgumentException">
key is an empty string</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.PartialMatch(System.String,System.Char)">
      <summary>
Partial match search with wild char character.</summary>
      <remarks>
<para> Searching the dictionary for the pattern "*o*o*o" matches the single word <i>rococo</i>, while the pattern "*a*a*a" matches many words, including <i>banana</i>, <i>casaba</i>, and <i>pajama</i>. </para></remarks>
      <param name="key">
key to match</param>
      <param name="wildChar">
"don't care" character</param>
      <exception cref="ArgumentNullException">
key is a null reference</exception>
      <exception cref="ArgumentException">
key is an empty string</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.LongestWord(System.String,System.Int32)">
      <param name="key">
</param>
      <param name="length">
</param>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.MysteryWord(System.String)">
      <param name="longest">
</param>
    </member>
    <member name="M:Game.Dictionary.GameDictionary.NearNeighbors(System.String,System.Int32)">
      <summary>
Near-neighbor search in the key string set.</summary>
      <remarks>
<para> This methods finds all words in the dictionary that are within a given Hamming distance of a query word. </para> <para> For instance, a search for all words within distance two of soda finds code, coma and 117 other words. </para></remarks>
      <returns>
near-neighbor search within <paramref name="distance" /> Hamming distance.</returns>
      <param name="key">
key to search for.</param>
      <param name="distance">
Hamming distance</param>
      <exception cref="ArgumentNullException">
key is a null reference</exception>
      <exception cref="ArgumentException">
dist is negative</exception>
    </member>
    <member name="T:Game.Dictionary.GameDictionaryEntry">
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEntry.#ctor(Game.Dictionary.GameDictionaryEntry,System.Char)">
      <summary>
Construct a Game node.</summary>
      <param name="parent">
parent node</param>
      <param name="splitChar">
split character</param>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.Parent">
      <summary>
Gets the parent of the node.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.SplitChar">
      <summary>
Gets the split character.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.IsKey">
      <summary>
Gets a value indicating wheter the node is a key.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.Key">
      <summary>
Gets the node key, if it is a key.</summary>
      <exception cref="InvalidOperationException">
The node does not hold a key-value pair.</exception>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.Value">
      <summary>
Gets the node value.</summary>
      <exception cref="InvalidOperationException">
The node does not hold a key-value pair.</exception>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.LowChild">
      <summary>
Gets the node low child.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.EqChild">
      <summary>
Gets the node ep child.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.HighChild">
      <summary>
Gets the node high child.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.HasChildren">
      <summary>
Gets a value indicating wheter the node has children.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.IsLowChild">
      <summary>
Gets a value indicating wheter the node is a low child.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.IsHighChild">
      <summary>
Gets a value indicating wheter the node is a high child.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntry.IsEqChild">
      <summary>
Gets a value indicating wheter the node is a eq child.</summary>
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEntry.Clone">
      <summary>
Creates a shallow copy of the entry</summary>
      <returns>
entry shallow copy</returns>
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEntry.ToString">
    </member>
    <member name="T:Game.Dictionary.GameDictionaryEntryEventArgs">
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEntryEventArgs.#ctor(Game.Dictionary.GameDictionaryEntry)">
      <summary>
Create a <see cref="GameDictionaryEntry" /> event argument.</summary>
      <param name="entry">
A <see cref="GameDictionaryEntry" /> entry to pass as argument.</param>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEntryEventArgs.Entry">
      <summary>
Gets the <see cref="GameDictionaryEntry" /> entry.</summary>
    </member>
    <member name="T:Game.Dictionary.GameDictionaryEnumerator">
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEnumerator.#ctor(Game.Dictionary.GameDictionary)">
      <summary>
Constructs an enumerator over <paramref name="Game" /></summary>
      <param name="Game">
dictionary to enumerate.</param>
      <exception cref="ArgumentNullException">
Game is null</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEnumerator.Reset">
      <summary>
Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEnumerator.Current">
      <summary>
Gets the current element in the collection.</summary>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEnumerator.Entry">
      <summary>
Gets both the key and the value of the current dictionary entry.</summary>
      <exception cref="InvalidOperationException">
The enumerator is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEnumerator.Key">
      <summary>
Gets the key of the current dictionary entry.</summary>
      <exception cref="InvalidOperationException">
The enumerator is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="P:Game.Dictionary.GameDictionaryEnumerator.Value">
      <summary>
Gets the value of the current dictionary entry.</summary>
      <exception cref="InvalidOperationException">
The enumerator is positioned before the first entry of the dictionary or after the last entry.</exception>
    </member>
    <member name="M:Game.Dictionary.GameDictionaryEnumerator.MoveNext">
      <summary>
Advances the enumerator to the next element of the collection.</summary>
      <returns>
true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="T:Game.Dictionary.GameSynchronizedDictionary">
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.#ctor(Game.Dictionary.GameDictionary)">
      <summary>
Creates a synchronized wrapper around the <see cref="GameDictionary" /> <paramref name="dic" />.</summary>
      <param name="dic">
Dictionary to synchronize</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.Add(System.String,System.Object)">
      <summary>
Synchronized Add method.</summary>
      <param name="key">
</param>
      <param name="value">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.Clear">
      <summary>
Synchronized clear method</summary>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.Remove(System.String)">
      <summary>
Synchronized remove method</summary>
      <param name="key">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.Clone">
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.ContainsKey(System.String)">
      <param name="key">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.CopyTo(System.Array,System.Int32)">
      <param name="array">
</param>
      <param name="arrayIndex">
</param>
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.Count">
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.Find(System.String)">
      <param name="key">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.GetEnumerator">
      <summary>
Gets a non-synchronized enumerator</summary>
      <remarks>
Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads could still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</remarks>
      <returns>
Enumerator</returns>
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.IsFixedSize">
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.IsSynchronized">
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.IsReadOnly">
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.Keys">
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.Values">
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.Item(System.String)">
      <summary>
Synchronized indexer</summary>
      <param name="key">
</param>
    </member>
    <member name="P:Game.Dictionary.GameSynchronizedDictionary.SyncRoot">
      <summary>
SyncRoot object</summary>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.PartialMatch(System.String)">
      <param name="key">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.PartialMatch(System.String,System.Char)">
      <param name="key">
</param>
      <param name="wildChar">
</param>
    </member>
    <member name="M:Game.Dictionary.GameSynchronizedDictionary.NearNeighbors(System.String,System.Int32)">
      <param name="key">
</param>
      <param name="distance">
</param>
    </member>
    <member name="N:InterfaceTestDictonary">
    </member>
    <member name="T:InterfaceTestDictonary.main">
    </member>
    <member name="M:InterfaceTestDictonary.main.#ctor">
    </member>
    <member name="T:InterfaceTestDictonary.TheBoogle">
    </member>
    <member name="M:InterfaceTestDictonary.TheBoogle.#ctor(Game.Dictionary.GameDictionary)">
      <param name="_Game">
</param>
    </member>
    <member name="T:InterfaceTestDictonary.TheHungman">
    </member>
    <member name="M:InterfaceTestDictonary.TheHungman.#ctor(Game.Dictionary.GameDictionary)">
      <param name="_Game">
</param>
    </member>
    <member name="T:InterfaceTestDictonary.TheLongestWord">
    </member>
    <member name="M:InterfaceTestDictonary.TheLongestWord.#ctor(Game.Dictionary.GameDictionary)">
      <param name="_Game">
</param>
    </member>
    <member name="T:InterfaceTestDictonary.TheMysteryWord">
    </member>
    <member name="M:InterfaceTestDictonary.TheMysteryWord.#ctor(Game.Dictionary.GameDictionary)">
      <param name="_Game">
</param>
    </member>
  </members>
</doc>
